Certainly! Here are the solutions to the questions you provided:
1.a) Program to convert weight in kilograms to pounds:

```python
weight_kg = float(input("Enter weight in kilograms: "))
weight_lb = weight_kg * 2.2
print("Weight in pounds:", weight_lb)


1.b) Program to print a sequence of numbers using a for loop:

```python
for num in range(8, 90, 3):
 print(num)
```

2.a) Program to calculate the sum and average of three numbers:

```python
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))
num3 = float(input("Enter the third number: "))
total = num1 + num2 + num3
average = total / 3
print("Total:", total)
print("Average:", average)
```

2.b) Program to print a name multiple times:

```python
name = input("Enter your name: ")
num_times = int(input("Enter the number of times to print your name: "))
for _ in range(num_times):
 print(name)
```

3.a) Program to print a triangle based on user input:

```python
height = int(input("Enter the height of the triangle: "))
for i in range(1, height + 1):
 print("*" * i)
```

3.b) Program to guess a random number:

```python
import random
random_number = random.randint(1, 10)
guess = int(input("Guess the number between 1 and 10: "))
if guess == random_number:
 print("Congratulations! You guessed it right.")
else:
 print("Sorry, wrong guess. The number was:", random_number)
```


4.a) Program to check if two numbers are close:
```python
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))
if abs(num1 - num2) <= 0.001:
 print("Close")
else:
 print("Not close")
```


4.b) Program to check if a word contains any vowels:
```python
word = input("Enter a word: ")
vowels = ['a', 'e', 'i', 'o', 'u']
has_vowels = any(char in vowels for char in word)
if has_vowels:
 print("The word contains vowels.")
else:
 print("The word does not contain any vowels.")
```


5.a) Program to compare the lengths of two strings:
```python
str1 = input("Enter the first string: ")
str2 = input("Enter the second string: ")
if len(str1) != len(str2):
 print("The strings are not of the same length.")
else:
 print("The strings are of the same length.")
```


5.b) Program to insert commas into a large integer:
```python
number = int(input("Enter a large integer: "))
number_with_commas = "{:,}".format(number)
print("Number with commas:", number_with_commas)
```


6) Program to insert multiplication symbols in an algebraic expression:
```python
expression = input("Enter an algebraic expression: ")
# Insert multiplication symbols before and after parentheses
expression = expression.replace('(', ' * (').replace(')', ') * ')
# Insert multiplication symbols between numbers and variables
expression = ''.join(['*' + char if char.isalpha() else char for char in expression])
print("Expression with multiplication symbols:", expression)
```


7) Program to generate and manipulate a list of random numbers:
```python
import random
# Generate a list of 
20 random numbers between 1 and 100
numbers = [random.randint(1, 100) for _ in range(20)]
# Print the list
print("List of random numbers:", numbers)
# Print the average of the elements in the list
average = sum(numbers) / len(numbers)
print("Average of the numbers:", average)
# Print the largest and smallest values in the list
largest = max(numbers)
smallest = min(numbers)
print("Largest number:", largest)
print("Smallest number:", smallest)
# Print the second largest and second smallest entries in the list
numbers_sorted = sorted(numbers)
second_largest = numbers_sorted[-2]
second_smallest = numbers_sorted[1]
print("Second largest number:", second_largest)
print("Second smallest number:", second_smallest)
# Print how many even numbers are in the list
even_count = sum(1 for num in numbers if num % 2 == 0)
print("Number of even numbers:", even_count)
```


8.a) Program to create a list of factors of an integer:
```python
num = int(input("Enter an integer: "))
factors = []
for i in range(1, num + 1):
 if num % i == 0:
 factors.append(i)
print("Factors of", num, ":", factors)
```


8.b) Program to remove repeated items from a list:
```python
items = input("Enter items separated by commas: ").split(',')
unique_items = list(set(items))
print("List with repeated items removed:", unique_items)
```


9) Program to find the longest run of zeros in a sequence of random integers:
```python
import random
sequence = [random.randint(0, 1) for _ in range(100)]
max_zeros = 0
current_zeros = 0
for num in sequence:
 if num == 0:
 current_zeros += 1
 max_zeros = max(max_zeros, current_zeros)
 else:
 current_zeros = 0
print("Longest run of zeros:", max_zeros)
```


10) Program to convert length in feet to various units:
```python
feet = float(input("Enter length in feet: "))
print("Choose an option to convert the length:")
print("1. Inches")
print("2. Yards")
print("3. Miles")
print("4. Millimeters")
print("5. Centimeters")
print("6. Meters")
print("7. Kilometers")
option = int(input("Enter your choice (1-7): "))
if option == 1:
 inches = feet * 12
 print("Length in inches:", inches)
elif option == 2:
 yards = feet / 3
 print("Length in yards:", yards)
elif option == 3:
 miles = feet / 5280
 print("Length in miles:", miles)
elif option == 4:
 millimeters = feet * 304.8
 print("Length in millimeters:", millimeters)
elif option == 5:
 centimeters = feet * 30.48
 print("Length in centimeters:", centimeters)
elif option == 6:
 meters = feet * 0.3048
 print("Length in meters:", meters)
elif option == 7:
 kilometers = feet * 0.0003048
 print("Length in kilometers:", kilometers)
else:
 print("Invalid choice!")
```


11.a) Function to calculate the sum of digits in a number:
```python
def sum_digits(num):
 return sum(int(digit) for digit in str(num))
num = int(input("Enter a number:
"))
result = sum_digits(num)
print("Sum of digits:", result)
```
11.b) Function to calculate the number of factors of a number:
```python
def number_of_factors(num):
 count = 0
 for i in range(1, num + 1):
 if num % i == 0:
 count += 1
 return count
num = int(input("Enter a number: "))
result = number_of_factors(num)
print("Number of factors:", result)
```


12.a) Function to find the first location where two strings differ:
```python
def first_diff(str1, str2):
 for i in range(len(str1)):
 if str1[i] != str2[i]:
 return i
 return -1
str1 = input("Enter the first string: ")
str2 = input("Enter the second string: ")
result = first_diff(str1, str2)
print("First location of difference:", result)
```


12.b) Function to check if a list is sorted:
```python
def is_sorted(lst):
 return lst == sorted(lst)
lst = input("Enter a list of numbers separated by commas: ").split(',')
lst = [int(num) for num in lst]
result = is_sorted(lst)
print("Is the list sorted?", result)
```


13.a) Function to calculate the nth root of a number:
```python
def root(x, n=2):
 return x ** (1 / n)
x = float(input("Enter a number: "))
n = int(input("Enter the value of n (default is 2): "))
result = root(x, n)
print("Root:", result)
```


13.b) Function to generate a list of the first n primes:
```python
def primes(n=100):
 primes_list = []
 num = 2
 while len(primes_list) < n:
 is_prime = True
 for i in range(2, int(num ** 0.5) + 1):
 if num % i == 0:
 is_prime = False
 break
 if is_prime:
 primes_list.append(num)
 num += 1
 return primes_list
n = int(input("Enter the number of primes to generate (default is 100): "))
result = primes(n)
print("List of primes:", result)
```


14.a) Function to merge two sorted lists using the sort method:
```python
def merge_sorted_lists(lst1, lst2):
 merged_list = lst1 + lst2
 merged_list.sort()
 return merged_list
list1 = [1, 3, 5, 7, 9]
list2 = [2, 4, 6, 8, 10]
result = merge_sorted_lists(list1, list2)
print("Merged list (using sort method):", result)
```


14.b) Function to merge two sorted lists without using the sort method:
```python
def merge_sorted_lists(lst1, lst2):
 merged_list = []
 i = j = 0
 while i < len(lst1) and j < len(lst2):
 if lst1[i] <= lst2[j]:
 merged_list.append(lst1[i])
 i += 1
 else:
 merged_list.append(lst2[j])
 j += 1
 while i < len(lst1):
 merged_list.append(lst1[i])
 i += 1
 while j < len(lst2):
 merged_list.append(lst2[j])
 j += 1
 return merged_list
list1 = [1, 3, 5, 7, 9]
list
2 = [2, 4, 6, 8, 10]
result = merge_sorted_lists(list1, list2)
print("Merged list (without using sort method):", result)
```
I hope these solutions are helpful! Let me know if you have any further questions.
